@startuml

package com.druid.gui.views {
   class LoginView {
      + void start()
      + void handleLoginClick()
      + void handleResetPasswordClick()
   }

   class ForgotPasswordView {
      + void start()
      + void handleSendClick()
      + void handleCancelClick()
   }

   class ResetPasswordView {
      + void start()
      + void handleUpdateClick()
      + void handleCancelClick()
   }
}

package com.druid.services {
   class UserService {
      + void update()
      + Optional<User> fetchOne(User)
      + Optional<User> authenticate()
   }

   class TokenService {
      + void generate()
      + void consume()
      + Optional<Token> fetchOne(Token)
   }
}

package com.druid.enums {
   enum UserStatus {
      ACTIVE 
      DISABLED
      BANNED
   }

   enum UserRole {
      BASIC
      ADMIN 
   }
}

package com.druid.models #DDDDDD {

Users <|-- Podcaster
Users "1" --> "*" Tokens: Generates

   class Users {
      - ID: int 
      - firstName: String 
      - lastName: String 
      - username: String 
      - password: String 
      - email: String 
      - role: Enum<UserRole> 
      - status: Enum<UserStatus>
      + void create(User)
      + void get(User)
      + void update(User)
      + void delete(User)
   }

   class Podcaster {
      - avatar: String 
      - biography: String 
   }

   class Tokens {
      - ID: int 
      - userID: int 
      - token: String 
      - consumed: boolean 
      - created: Timestamp 
      + void create(Token)
      + void get(Token)
      + void update(Token)
      + void delete(Token)
   }
}

note left of Tokens::token
   Tokens are secure strings 
   of text that can allow a 
   user that has forgotten 
   their password to recover 
   their account.
end note

Users --> UserStatus
Users --> UserRole

@enduml
