#+TITLE: Magnum's modules and functionalities
#+AUTHOR: Druid

* Modules
** User Management
#+begin_src plantuml :file uml/class-diagram.svg
package com.druid.gui.views {
   class LoginView {
      + void start()
      + void handleLoginClick()
      + void handleResetPasswordClick()
   }

   class ForgotPasswordView {
      + void start()
      + void handleSendClick()
      + void handleCancelClick()
   }

   class ResetPasswordView {
      + void start()
      + void handleUpdateClick()
      + void handleCancelClick()
   }
}

package com.druid.services {
   class UserService {
      + void update()
      + Optional<User> fetchOne(User)
      + Optional<User> authenticate()
   }

   class TokenService {
      + void generate()
      + void consume()
      + Optional<Token> fetchOne(Token)
   }
}

package com.druid.enums {
   enum UserStatus {
      ACTIVE 
      DISABLED
      BANNED
   }

   enum Activities {
      SECURITY
      BILLING
      PROFILE
   }

   enum Offense {
      HARASSMENT 
      SPAM
      VIOLENCE
   }
}

package com.druid.models #DDDDDD {

Users <|-- Podcaster
Users <|-- Administrator

Users "1" --> "*" Tokens: Generates
Users "1" --> "*" History: Logs
Users "1" --> "*" Flags: Flags

Users --> UserStatus
History --> Activities
Flags --> Offense

   class Users {
      - ID: int 
      - firstName: String 
      - lastName: String 
      - username: String 
      - password: String 
      - email: String 
      - status: Enum<UserStatus>
      - avatar: String
      + void create(User)
      + void get(User)
      + void update(User)
      + void delete(User)
   }

   class Podcaster {
      - ID: int
      - firstName: String 
      - lastName: String 
      - biography: String 
   }

   class Administrator {
      - ID: int
      - firstName: String 
      - lastName: String 
   }

   class Tokens {
      - ID: int 
      - userID: int 
      - token: String 
      - consumed: boolean 
      - created: Timestamp 
      + void create(Token)
      + void get(Token)
      + void update(Token)
      + void delete(Token)
   }

    class History {
      - ID: int
      - userID: int
      - activity: enum<Activities>
      - description: String
      - time: Date
      + void create(History)
      + void get(History)
      + void update(History)
      + void delete(History)
    }

    class Flags {
      - ID: int
      - flaggedID: int
      - flaggerID: int
      -	offense: Offense
      - description: String
      - time: Timestamp
    }
}

note left of Tokens::token
   Tokens are secure strings 
   of text that can allow a 
   user that has forgotten 
   their password to recover 
   their account.
end note
#+end_src

#+RESULTS:
[[file:uml/class-diagram.svg]]

** Podcast Management
*** Podcasts
:PROPERTIES:
:CUSTOM_ID: podcasts
:END:

#+BEGIN_EXAMPLE
+-----------------------------+
| Podcasts                    |
|-----------------------------|
| ID: int                     |
| subscriptionID: int         |
| categoryID: int             |
| views: int = 0              |
| title: String               |
| description: String         |
| hash: String                |
| rating: int                 |
| podcasterID: int            |
+-----------------------------+
#+END_EXAMPLE

Attributes:
- ~subscriptionID~: References the /ID/ column of the [[#subscriptions][Subscriptions]] table. Unless it is *NULL*, the podcast is part of a subscription.
- ~categoryID~: References the /ID/ column of the [[#categories][Categories]] table.
- ~hash~: A podcast's hash is calculated and stored in order to stop the re-uploading of already existing audio files (podcasts) within the database.

*** Categories
:PROPERTIES:
:CUSTOM_ID: categories
:END:

#+BEGIN_EXAMPLE
+---------------------+
| Categories          |
|---------------------|
| ID: int             |
| name: String        |
| description: String |
+---------------------+
#+END_EXAMPLE

** Article Management
*** Articles
:PROPERTIES:
:CUSTOM_ID: articles
:END:

#+BEGIN_EXAMPLE
+------------------+
| Articles         |
|------------------|
| ID: int          |
| authorID: int    |
| title: String    |
| content: String  |
+------------------+
#+END_EXAMPLE

*** Comments
#+BEGIN_EXAMPLE
+------------------+
| Comments         |
|------------------|
| ID: int          |
| userID: int      |
| articleID: int   |
| message: String  |
| replyingTo: int  |
| submitDate: Date |
+------------------+
#+END_EXAMPLE

Attributes:
- ~userID~: References the /ID/ column of the [[User Management][Users]] table.
- ~articleID~: References the /ID/ column of the [[#articles][Articles]] table.

** Subscription Management

Podcasters can monetize their content in the form of subscriptions.

Users that choose to subscribe to said podcasters, must pay the fee determined
by them.

*** Orders
:PROPERTIES:
:CUSTOM_ID: orders
:END:

#+BEGIN_EXAMPLE
+---------------------+
| Orders              |
|---------------------|
| ID: int             |
| userID: int         |
| subscriptionID: int |
| duration: int       |
| price: float        |
| orderDate: datetime |
| startDate: datetime |
| endDate: datetime   |
+---------------------+
#+END_EXAMPLE

Attributes:
- ~userID~: References the /ID/ column of the [[User Management][Users]] table.
- ~subscriptionID~: References the /ID/ column of the [[#subscriptions][Subscription]] table.

*** Subscriptions
:PROPERTIES:
:CUSTOM_ID: subscriptions
:END:

#+BEGIN_EXAMPLE
+------------------+
|  Subscriptions   |
|------------------|
| ID: int          |
| podcasterID: int |
| price: float     |
+------------------+
#+END_EXAMPLE

Attributes:
- ~podcasterID~: References the /ID/ column of the [[User Management][Users]] table.

** Ticket Management
*** Ticket
#+BEGIN_EXAMPLE
+----------------------------+
| Ticket                     |
|----------------------------|
| ID: int                    |
| submittedBy: int           |
| resolvedBy: int            |
| kindID: int                |
| description: String        |
| status: enum<Status>       |
+----------------------------+

enum Status {
  Resolved,
  Closed,
  Pending,
}
#+END_EXAMPLE

Attributes:
- ~submittedBy~: References the ID column of the [[User Management][Users]] table - The user that submitted the ticket.
- ~resolvedBy~: References the ID column of the [[User Management][Users]] table - The user that resolved/handled the ticket.
- ~kindID~: References the ID column of the [[#ticket-kind][Ticket Kind]] table.

*** Ticket Kind
:PROPERTIES:
:CUSTOM_ID: ticket-kind
:END:

#+BEGIN_EXAMPLE
+------------------------+
| TicketKind             |
|------------------------|
| ID: int                |
| priority: int          |
| kind: enum<Kind>       |
+------------------------+

enum Kind {
  FeatureRequest,
  BugReport,
  FailedPayment,
  AccountRecovery,
  Other,
}
#+END_EXAMPLE

* Functionalities
1. Audio player.
2. [[#footnotes][Discover page^{1}]].
3. [[#footnotes][XML parser^{2}]].
4. Keyboard navigation.
5. Slur filter for the /Comments/ model.
6. Spam filter for the /Podcasts/ model.
7. Get started guide.

* Footnotes
:PROPERTIES:
:CUSTOM_ID: footnotes
:END:

¹ Discover page: An interface that presents a curated list of podcasts to the
user sorted by their category.

² XML Parser: RSS is at the backbone of the podcasting industry; RSS speaks XML.
Magnum may retrieve and play *outside podcasts*, i.e. podcasts that are not
available directly on the platform.
